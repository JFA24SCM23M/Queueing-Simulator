import 'package:queueing_simulator/util/stats.dart';

/// Base class for all process types.
abstract class Process {
  final String name;

  Process(this.name);

  /// Returns a list of all events generated by this process.
  List<Event> generateEvents();
}

/// Class representing an event in the simulation.
class Event {
  final String processName;
  final int arrivalTime;
  final int duration;
  int startTime = 0; // Start time will be set when the event begins

  Event(this.processName, this.arrivalTime, this.duration);

  /// Method to set the start time of the event.
  void startAt(int time) {
    startTime = time;
  }

  /// Getter to calculate wait time for the event.
  int get waitTime => startTime - arrivalTime;
}

/// A process that generates a single event.
class SingletonProcess extends Process {
  final int duration;
  final int arrivalTime;

  SingletonProcess(String name, this.duration, this.arrivalTime) : super(name);

  @override
  List<Event> generateEvents() {
    return [Event(name, arrivalTime, duration)];
  }
}

/// A process that generates periodic events.
class PeriodicProcess extends Process {
  final int duration;
  final int interarrivalTime;
  final int firstArrival;
  final int repetitions;

  PeriodicProcess(String name, this.duration, this.interarrivalTime,
      this.firstArrival, this.repetitions)
      : super(name);

  @override
  List<Event> generateEvents() {
    List<Event> events = [];
    for (int i = 0; i < repetitions; i++) {
      int arrival = firstArrival + i * interarrivalTime;
      events.add(Event(name, arrival, duration));
    }
    return events;
  }
}

/// A process that generates stochastic events with random durations and interarrival times.
class StochasticProcess extends Process {
  final int meanDuration;
  final int meanInterarrivalTime;
  final int firstArrival;
  final int endTime;
  final ExpDistribution durationDistribution;
  final ExpDistribution interarrivalDistribution;

  StochasticProcess(String name, this.meanDuration, this.meanInterarrivalTime,
      this.firstArrival, this.endTime)
      : durationDistribution = ExpDistribution(mean: meanDuration.toDouble()),
        interarrivalDistribution =
            ExpDistribution(mean: meanInterarrivalTime.toDouble()),
        super(name);

  @override
  List<Event> generateEvents() {
    List<Event> events = [];
    int currentTime = firstArrival;

    while (currentTime <= endTime) {
      // Generate random event duration and interarrival time
      int duration = durationDistribution.next().toInt();
      int interarrivalTime = interarrivalDistribution.next().toInt();

      // Check if adding this event would exceed endTime
      if (currentTime + duration > endTime) {
        print("Stopping event generation. Event would finish after endTime.");
        break;
      }

      // Create the event and add it to the list
      events.add(Event(name, currentTime, duration));
      print("Generated duration: $duration at time $currentTime");

      // Advance current time by the interarrival time
      currentTime += interarrivalTime;

      // Check if the next event's start time exceeds endTime
      if (currentTime >= endTime) {
        print(
            "Stopping event generation. Next event would start after endTime.");
        break;
      }

      // Log generated interarrival time for debugging
      print("Generated interarrival time: $interarrivalTime");
      print("Next event scheduled at time: $currentTime");
      print("Process endTime: $endTime");
    }

    return events;
  }
}
